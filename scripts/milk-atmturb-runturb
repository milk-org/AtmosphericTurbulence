#!/usr/bin/env bash

MSdescr="Create atmospheric turbulence sequence"

# standard configuration
# 
source milk-script-std-config

# prerequisites
#
RequiredCommands=( milk ls cd )
RequiredFiles=()
RequiredDirs=()


# SCRIPT ARGUMENTS 
# syntax: "name;type(s)/test(s);description"

MSarg+=( "slambdaum;float;wavelength" )


# SCRIPT OPTIONS
# syntax: "short;long;functioncall;args[types];description"

MSopt+=( "c;confcreate;confcreate;;create configuration file and exit" )


function confcreate() {
	echo "Creating configuration file"
	milk-atmturb-mkconf WFsim.conf
exit
}



source milk-argparse

slambdaum="${inputMSargARRAY[0]}"


PRECISION="0" #default 0: single
COMPmode="1" # default: compute wavefronts


milk << EOF
mload milkWFpropagate
mload milkOpticsMaterials
mload milkAtmosphereModel
mload milkAtmosphericTurbulence
m?
m? WFpropagate
m? AtmosphericTurbulence
atmturb.mkwfseq ${slambdaum} ${PRECISION} ${COMPmode}
exitCLI
EOF

exit















# execute script commands

## OPTIONAL : refractive index / absorption coefficients files (RIA files)
RIAfile_dir="/data/WORK/2014-AtmTurb/RefractiveIndices"
RIAfile_N2="${RIAfile_dir}/R300000/RIA_N2.dat"
RIAfile_O2="${RIAfile_dir}/R300000/RIA_O2.dat"
RIAfile_Ar="${RIAfile_dir}/R30000/RIA_Ar.dat"
RIAfile_H2O="${RIAfile_dir}/R300000/RIA_H2O.dat"
RIAfile_CO2="${RIAfile_dir}/R300000/RIA_CO2.dat"
RIAfile_Ne="${RIAfile_dir}/R30000/RIA_Ne.dat"
RIAfile_He="${RIAfile_dir}/R30000/RIA_He.dat"
RIAfile_CH4="${RIAfile_dir}/R300000/RIA_CH4.dat"
RIAfile_Kr="${RIAfile_dir}/R30000/RIA_Kr.dat"
RIAfile_H2="${RIAfile_dir}/R30000/RIA_H2.dat"
RIAfile_O3="${RIAfile_dir}/R300000/RIA_O3.dat"































printHELP ()
{
echo
echo "------------------------------------------------------------------------"
echo   "$(tput bold) $pname :  ATMOSPHERIC TURBULENCE SCRIPT $(tput sgr0)"
echo " "
echo " Edit script to set atmosphere and turbulence parameters"
echo " Execute script without to compute atmospheric wavefronts"
echo ""
echo " $(tput bold)USAGE:$(tput sgr0)"
echo "      $0 [-hNdT] <slambdaum>"
echo ""
echo " $(tput bold)OPTIONS:$(tput sgr0)"
echo "     $(tput bold)-h$(tput sgr0)             help"
echo "     $(tput bold)-e$(tput sgr0) <execname>  use executable <execname>"
echo "     $(tput bold)-d$(tput sgr0)             double precision (default: single)"
echo "     $(tput bold)-a$(tput sgr0)             Compute atmosphere properties only, no wavefronts"
echo "     $(tput bold)-T$(tput sgr0)  <case>     Adopt turbulence profile case (default: custom 7-layer)"
echo "                            HVbad : Hufnager-Valley, 20m/s, 1.30 arcsec seeing"
echo "                            HVmed : Hufnager-Valley, 20m/s, 0.65 arcsec seeing"
echo "                            HVgood: Hufnager-Valley, 10m/s, 0.40 arcsec seeing"
echo "     $(tput bold)-N$(tput sgr0)             Number of layer for Hufnager-Valley cases (default : 20)"
echo " $(tput bold)INPUT:$(tput sgr0)"
echo "          slambdaum       Wavelength [um]"
echo ""
echo "------------------------------------------------------------------------"
echo "     $(tput bold)                OVERVIEW $(tput sgr0)"
echo ""
echo "Main steps are: "
echo "   Build atmospheric composition/density model"
echo "      function call: AtmosphereModel_Create_from_CONF(CONFFILE)"
echo "      INPUT: "
echo "           ./RefractiveIndices/RIA_xx.dat, where xx = N2, O2, Ar, H2O, CO2, Ne, He, CH4, Kr, H2, O3, N, O, H"
echo "           (if RIA file does not exist, uses Sellmeier equations in module OpticsMaterials)"
echo "      OUTPUT:"
echo "          atm.txt               :  atmospheric vertical composition/density profile"
echo "          RindexSite.txt        : refractive index at site, as a function of wavelength (lambda[um] rindex abs)"
echo "          RefractAngle.dat      : refraction angle as a function of wavelength"
echo ""
echo "          refractpath_0550.txt  : geometric light ray path at  550 nm "
echo "          refractpath_1650.txt  : geometric light ray path at 1650 nm "
echo "              columns: "
echo "                1:h0              altitude above sea level"
echo "                2:x0              x coordinate"
echo "                3:y0              y coordinate (aligned with altitude vector at sea level"
echo "                4:alpha           ray angle [rad]"
echo "                5:alpha-Zangle    atm refraction: ray angle - Zenith angle [rad]"
echo "                6:alpha-Zangle    atm refraction: ray angle - Zenith angle [arcsec]"
echo "                7:offset          atm refraction geometric shear [m]"
echo "------------------------------------------------------------------------"
}


EXITSTATUS=0


function cmdexists()
{
  command -v "$1" >/dev/null 2>&1
}


function checkCommand {
if cmdexists $1; then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) found"
else
    echo "[$(tput setaf 1)$(tput bold) FAILED $(tput sgr0)] Command $(tput bold)$1$(tput sgr0) not installed.  Aborting."; EXITSTATUS=1;
fi

}



# ================= OPTIONS =============================
while getopts :hT:dN:ae: FLAG; do
  case $FLAG in
    h)  #show help
      printHELP
      exit
      ;;
    T) # set loop name
    turbprofcase=$OPTARG
    echo "ADOPTING TURBULENCE PROFILE CASE = $turbprofcase"
    ;;
    d) # double precision
	PRECISION="1" 
    ;;
    N) # number of layers
	NBlayers=$OPTARG
    ;;
    a)
    COMPmode="0"
    ;;
    e)
    execname=$OPTARG
    ;;
    \?) #unrecognized option - show help
      echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed."
      printHELP
      ;;
  esac
done

shift $((OPTIND-1))  




# ============================= CHECK IF COMMAND EXISTS ==========================

checkCommand $execname




if [ "$1" = "help" ] || [ "$#" -ne $NBARGS ]; then
if [ "$#" -ne $NBARGS ]; then
    echo "$(tput setaf 1)$(tput bold) Illegal number of parameters ($NBARGS params required, $# entered) $(tput sgr0)"
fi
printHELP
        exit
fi




if [ $EXITSTATUS -eq 1 ]; then
echo ""
echo "$(tput setaf 1)$(tput bold) REQUIRED FILES, COMMANDS NOT FOUND: EXITING $(tput sgr0)"
echo ""
exit
else
echo ""
fi





function linkRIA {
if [ -f "RefractiveIndices/RIA_$2.dat" ]
then
echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)RefractiveIndices/RIA_$2.dat$(tput sgr0) already present"
else
if [ -f $1 ]
  then
    echo "[$(tput setaf 2)$(tput bold)   OK   $(tput sgr0)] File $(tput bold)$1$(tput sgr0) linked"
	ln -s $1 $PWD/RefractiveIndices/RIA_$2.dat
   else
    echo "[$(tput setaf 5)$(tput bold) FAILED $(tput sgr0)] WARNING: File $(tput bold)$1$(tput sgr0) not found"
fi
fi
}


mkdir -p RefractiveIndices
linkRIA ${RIAfile_N2} N2
linkRIA ${RIAfile_O2} O2
linkRIA ${RIAfile_Ar} Ar
linkRIA ${RIAfile_H2O} H2O
linkRIA ${RIAfile_CO2} CO2
linkRIA ${RIAfile_Ne} Ne
linkRIA ${RIAfile_He} He
linkRIA ${RIAfile_CH4} CH4
linkRIA ${RIAfile_Kr} Kr
linkRIA ${RIAfile_H2} H2
linkRIA ${RIAfile_O3} O3






slambdaum="$1"




$execname << EOF
mkwfs ${slambdaum} ${PRECISION} ${COMPmode}
exit
EOF

